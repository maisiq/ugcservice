name: Deploy pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    types:
      - opened
      - edited
      - reopened
      - synchronize
    branches: [ "master" ]
    paths-ignore:
      - '**/README.md'
      - 'docs/**'

env:
  CONTAINER_REGISTRY: ghcr.io
  CR_USER: ${{ github.repository_owner }}
  CR_TOKEN: ${{ secrets.GHCR_TOKEN }}
  DOCKER_IMAGE_BASE: ghcr.io/${{ github.repository }}
  BUILD: dev

jobs:
  test-api:
    runs-on: ubuntu-latest
    env:
      TEST_DB_URI: mongodb://localhost:27017/?directConnection=true
      KAFKA_SERVER0: kafka0:9094
      KAFKA_SERVER1: kafka1:9094
      KAFKA_SERVER2: kafka2:9094
    steps:
      - name: Start Test MongoDB
        run: >-
          docker run -d -p 27017:27017 --name mongodb mongo:8.0.1@sha256:9342a9279a9841fc5f8192e49dcaaf9404e6bb3a90e8cf134eb96074830dd448
          mongod --replSet rs0 --bind_ip_all --port 27017
      - name: Initialize replica set
        run: |
          # Ожидаем запуска MongoDB
          until docker exec mongodb mongosh --eval "db.version()" > /dev/null 2>&1; do
            echo "Waiting for MongoDB..."
            sleep 2
          done

          # Инициализируем репликасет
          docker exec mongodb mongosh --eval 'rs.initiate()'
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Testing Dependencies
        run: pip install -q -r ./api/requirements/api.test.txt
      - name: Lint with flake8
        continue-on-error: true
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --verbose
      - name: Testing with pytest
        run: cd ./api && pytest
  build:
    runs-on: ubuntu-latest
    needs: test-api
    outputs:
      API_DOCKER_IMAGE: ${{ steps.build_api_image.outputs.API_DOCKER_IMAGE }}
      CONSUMER_DOCKER_IMAGE: ${{ steps.build_consumer_image.outputs.CONSUMER_DOCKER_IMAGE }}
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            api
            ETL
          sparse-checkout-cone-mode: true
      - name: Build API image
        id: build_api_image
        run: |
          API_DOCKER_IMAGE=${{ env.DOCKER_IMAGE_BASE }}/api:${{ hashFiles(format('./api/requirements/api.{0}.txt', env.BUILD)) }}
          echo API_DOCKER_IMAGE=$API_DOCKER_IMAGE | tee -a $GITHUB_OUTPUT $GITHUB_ENV
          docker build --build-arg BUILD=${{ env.BUILD }} -t $API_DOCKER_IMAGE ./api/
      - name: Build Consumer image
        id: build_consumer_image
        run: |
          CONSUMER_DOCKER_IMAGE=${{ env.DOCKER_IMAGE_BASE }}/consumer:${{ hashFiles(format('./ETL/requirements/consumer.{0}.txt', env.BUILD)) }}
          echo CONSUMER_DOCKER_IMAGE=$CONSUMER_DOCKER_IMAGE | tee -a $GITHUB_OUTPUT $GITHUB_ENV
          docker build --build-arg BUILD=${{env.BUILD}} -t $CONSUMER_DOCKER_IMAGE -f "ETL/Dockerfile.etl" ./ETL
      - name: Login to CR
        run: echo ${{ env.CR_TOKEN }} | docker login --username ${{ env.CR_USER }} --password-stdin ${{ env.CONTAINER_REGISTRY }}
      - name: Push image to CR
        run: |
          docker push $API_DOCKER_IMAGE
          docker push $CONSUMER_DOCKER_IMAGE
  deploy:
    runs-on: ubuntu-latest
    needs: build
    # environment: deploy
    env:
      API_DOCKER_IMAGE: ${{ needs.build.outputs.API_DOCKER_IMAGE }}
      CONSUMER_DOCKER_IMAGE: ${{ needs.build.outputs.CONSUMER_DOCKER_IMAGE }}
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      KAFKA_SERVER0: ${{ secrets.KAFKA_SERVER0 }}
      KAFKA_SERVER1: ${{ secrets.KAFKA_SERVER1 }}
      KAFKA_SERVER2: ${{ secrets.KAFKA_SERVER2 }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
    steps:
      - uses: actions/checkout@v4
      - name: Login to CR
        run: echo ${{ env.CR_TOKEN }} | docker login --username ${{ env.CR_USER }} --password-stdin ${{ env.CONTAINER_REGISTRY }}
      - name: Start containers
        run: |
          docker compose -f docker-compose.yml down
          docker compose -f docker-compose.yml up --pull
      - name: Test API
        run: curl http://localhost:80/docs # postman tests?