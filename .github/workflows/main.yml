name: Deploy pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    types:
      - opened
      - edited
      - reopened
      - synchronize
    branches: [ "master" ]
    paths-ignore:
      - '**/README.md'
      - 'docs/**'

env:
  CONTAINER_REGISTRY: ghcr.io
  CR_USER: ${{ github.repository_owner }}
  CR_TOKEN: ${{ secrets.GHCR_TOKEN }}
  API_DOCKER_IMAGE: ghcr.io/${{ github.repository }}/api:${{ github.sha }}
  CONSUMER_DOCKER_IMAGE: ghcr.io/${{ github.repository }}/consumer:${{ github.sha }}
  BUILD: dev

jobs:
  api-tests:
    runs-on: ubuntu-latest
    env:
      TEST_DB_URI: mongodb://localhost:27017/?directConnection=true
      KAFKA_SERVER0: kafka0:9094
      KAFKA_SERVER1: kafka1:9094
      KAFKA_SERVER2: kafka2:9094
    steps:
      - name: Start Test MongoDB
        run: >-
          docker run -d -p 27017:27017 --name mongodb mongo:8.0.1@sha256:9342a9279a9841fc5f8192e49dcaaf9404e6bb3a90e8cf134eb96074830dd448
          mongod --replSet rs0 --bind_ip_all --port 27017
      - name: Initialize replica set
        run: |
          # Ожидаем запуска MongoDB
          until docker exec mongodb mongosh --eval "db.version()" > /dev/null 2>&1; do
            echo "Waiting for MongoDB..."
            sleep 2
          done

          # Инициализируем репликасет
          docker exec mongodb mongosh --eval 'rs.initiate()'
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Caching testing deps
        id: cache-api-deps
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('./api/requirements/api.test.txt') }}
      - name: Install Testing Dependencies
        run: pip install -r ./api/requirements/api.test.txt
      - name: Lint with flake8
        continue-on-error: true
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --verbose
      - name: Testing with pytest
        run: cd ./api && pytest
  build:
    runs-on: ubuntu-latest
    needs: api-tests
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            api
            ETL
          sparse-checkout-cone-mode: true
      - name: Login to CR
        run: echo ${{ env.CR_TOKEN }} | docker login --username ${{ env.CR_USER }} --password-stdin ${{ env.CONTAINER_REGISTRY }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host
      - name: Build and push API image
        uses: docker/build-push-action@v6
        with:
          context: ./api/
          push: true
          tags: ${{ env.API_DOCKER_IMAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD=${{ env.BUILD }}
      - name: Build and push Consumer image
        uses: docker/build-push-action@v6
        with:
          context: ./ETL/
          file: ETL/Dockerfile.etl
          push: true
          tags: ${{ env.CONSUMER_DOCKER_IMAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD=${{ env.BUILD }}
  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      KAFKA_SERVER0: ${{ secrets.KAFKA_SERVER0 }}
      KAFKA_SERVER1: ${{ secrets.KAFKA_SERVER1 }}
      KAFKA_SERVER2: ${{ secrets.KAFKA_SERVER2 }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
    steps:
      - uses: actions/checkout@v4
      - name: Login to CR
        run: echo ${{ env.CR_TOKEN }} | docker login --username ${{ env.CR_USER }} --password-stdin ${{ env.CONTAINER_REGISTRY }}
      - name: Prepare env files
        run: |
          echo MONGODB_URI=mongodb://mongos1:27017,mongos2:27017 > .env

          cat << EOF | tee ./infra/clickhouse/.env ./ETL/.env > /dev/null
          CLICKHOUSE_USER=root
          CLICKHOUSE_PASSWORD=example
          EOF

          cat << EOF | tee -a .env ./ETL/.env > /dev/null
          KAFKA_SERVER0=kafka0:9094
          KAFKA_SERVER1=kafka1:9094
          KAFKA_SERVER2=kafka2:9094
          EOF

          cat << EOF > ./infra/ELK/elasticsearch/.env
          ELASTIC_USER=elastic
          ELASTIC_PASSWORD=example
          EOF

          echo LOGSTASH_KEYSTORE_PASS=example > ./infra/ELK/logstash/.env

          mkdir ./infra/ELK/kibana/secrets
          mkdir ./infra/ELK/logstash/secrets
          mkdir ./infra/mongo/secrets

          echo testpassword > ./infra/ELK/kibana/secrets/es_password.txt
          echo kibana_system > ./infra/ELK/kibana/secrets/es_username.txt
          echo elastic > ./infra/ELK/logstash/secrets/es_user.txt
          echo example > ./infra/ELK/logstash/secrets/es_password.txt
          echo root > ./infra/mongo/secrets/root-user.txt
          echo example > ./infra/mongo/secrets/root-pwd.txt
      - name: Start containers
        run: |
          docker compose --profile run -f docker-compose.yml down
          docker compose --profile run -f docker-compose.yml up --pull missing -d
      - name: Test service
        run: |
          # Проверка состояния UGC Service
          sleep 20
          until curl http://localhost:80/docs > /dev/null 2>&1; do
            echo "Waiting for UGC Service..."
            sleep 2
          done
          curl http://localhost:80/movie/1/rating
          docker compose ps --format 'table {{.Names}}\t{{.Status}}' -a
          cat .env